#+title: 1358. Number Of Substrings Containing All Three Characters
#+author: Bedaprakash Nayak
#+date: <2023-12-23 Sat>
Given a string ~s~ consisting only of characters a, b and c.
Return the number of substrings containing at least one occurrence of all these characters a, b and c.

#+begin_src text
Example 1:
Input: s = "abcabc"
Output: 10
Explanation: The substrings containing at least one occurrence of the characters a, b and c are "abc", "abca", "abcab", "abcabc", "bca", "bcab", "bcabc", "cab", "cabc" and "abc" (again).

Example 2:
Input: s = "aaacb"
Output: 3
Explanation: The substrings containing at least one occurrence of the characters a, b and c are "aaacb", "aacb" and "acb".

Example 3:
Input: s = "abc"
Output: 1
#+end_src

*Constraints:*
- ~3 <= s.length <= 5 x 10^4~
- ~s~ only consists of a, b or c characters.

  -----

** Intuition
- Here we need to find the number of substrings in a given string ~s~ that contain all the characters 'a', 'b' and 'c'. We can use sliding window approach to maintain two pointers left and right, and an unordered map to keep track of the count of each character in the current window. We keep expanding the window by moving the end pointer until we find a window that contains all three characters.
- Once we find such a window, we know that there are substrings which will contain all three character. We can add such substring counts to our answer and move the left pointer towards right until we no longer have a valid window(containing all three characters).

** Approach
- Initialize left, right and ans as 0 to keep track of the valid window and number of substrings. Initialize a unordered map to keep track of the count of each character in the current window.
- Move the right pointer untill we find a valid window containing all the three character 'a', 'b' and 'c'.
- Once found we need to count number of substrings that contains all three character. we can use while loop to find all those substring and add them to the answer.
- In each iteration we need to shrink the window by moving the left towards right.
- We can loop through the whole string to find such substrings containing all three characters.
- Return the total count.

** Solution
#+begin_src C
#include <iostream>
#include <unordered_map>

using namespace std;

class Solution {
public:
  int numberOfSubstrings(string s) {
    int n = s.length();
    int left = 0;
    int ans = 0;
    unordered_map<char, int> mpp;
    for (int right = 0; right < n; right++) {
      mpp[s[right]]++;
      while (mpp['a'] >= 1 && mpp['b'] >= 1 && mpp['c'] >= 1) {
        ans += n - right + 1;
        mpp[s[left]]--;
        left++;
      }
    }
    return ans;
  }
};
#+end_src

*** Complexity
- Time Complexity: ~O(N)~
- Space Complexity: ~O(1)~ (as we are only storing three character count.)
