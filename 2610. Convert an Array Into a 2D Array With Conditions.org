#+title: 2610. Convert An Array Into A 2d Array With Conditions
#+author: Bedaprakash Nayak
#+date: <2024-01-02 Tue>
You are given an integer array =nums=. You need to create a 2D array from =nums= satisfying the following conditions:

The 2D array should contain only the elements of the array =nums=.
Each row in the 2D array contains distinct integers.
The number of rows in the 2D array should be minimal.
Return the resulting array. If there are multiple answers, return any of them.

Note that the 2D array can have a different number of elements on each row.

#+begin_src C++
Example 1:
Input: nums = [1,3,4,1,2,3,1]
Output: [[1,3,4,2],[1,3],[1]]
Explanation: We can create a 2D array that contains the following rows:
- 1,3,4,2
- 1,3
- 1
All elements of nums were used, and each row of the 2D array contains distinct integers, so it is a valid answer.
It can be shown that we cannot have less than 3 rows in a valid array.

Example 2:
Input: nums = [1,2,3,4]
Output: [[4,3,2,1]]
Explanation: All elements of the array are distinct, so we can keep all of them in the first row of the 2D array.
#+end_src

*Constraints:*

- ~1 <= nums.length <= 200~
- ~1 <= nums[i] <= nums.length~

-----

** Intuition
A map can be used to track all the frequencies for each number. As each matrix row will have distinct numbers then we will start adding the =nums= to rows and then those rows to =matrix=.

** Initial Approach
- Initialize a =matrix= and a map.
- Iterate over the given vector to find the frequencies of each number
- Now iterate over the frequency map and start adding the elements to the =temp= vector. Decrease the frequency of each as you add.
- Finally add the =temp= row to =matrix= and return the value.

** Solution

#+begin_src C++
#include <unordered_map>
#include <vector>

using namespace std;

class Solution {
public: // Initial O(n + m)
  vector<vector<int>> findMatrix_brute(vector<int> &nums) {
    vector<vector<int>> matrix;
    unordered_map<int, int> mpp;

    for (int n : nums) {
      mpp[n]++;
    }
    while (!mpp.empty()) {
      vector<int> temp;
      auto it = mpp.begin();
      while (it != mpp.end()) {
        temp.push_back(it->first);
        if (!--mpp[it->first]) {
          it = mpp.erase(it);
        } else {
          it++;
        }
      }
      matrix.push_back(temp);
    }
    return matrix;
  }
};
#+end_src

*** Complexity
- Time Complexity: =O(n + m^2)=
- Space Complexity: =(n)=

** Better Approach
The better way will be keeping track of maximum frequncy then adding the elements from the map into each row.

- Initialize a map to keep track of each frequency and a =maxFrequency= variable for maximum frequency.
- Initialize the =matrix= of =maxFrquency= rows.
- Iterate over the map and for each element add them to different rows untill their frequency is 0.
- Finally return the matrix.

** Solution

#+begin_src C++
#include <unordered_map>
#include <vector>

using namespace std;

class Solution {
public: // Better O(n + m)
  vector<vector<int>> findMatrix_better(vector<int> &nums) {
    unordered_map<int, int> mpp;
    int maxFrequency = 0;

    for (int n : nums) {
      mpp[n]++;
      maxFrequency = max(maxFrequency, mpp[n]);
    }
    vector<vector<int>> matrix(maxFrequency);

    for(auto it : mpp) {
      int i = 0;
      while(it.second) {
        matrix[i].push_back(it.first);
        it.second--;
        i++;
      }
    }
    return matrix;
  }
};
#+end_src

*** Complexity
- Time Complexity: =O(n + m^2)=
- Space Complexity: =O(n)=

** Optimal Approach
Optimal way is to keep a check on each element frequencies. Which will indeed determine the maximum number of rows in the matrix.

- Initialize a unordered_map and a =matrix=.
- Iterate over the given vector and chek if ~mpp[curr] >= matrix.size()~ which means we need more number of rows. Add a row ~matrix.push_back({})~.
- Add the current element to the matrix. (row will be decided based on the frequency.)
- Increase the frequncy of that element, So that next occurrence can be added to the next row.
- Finally return the matrix.

** Solution

#+begin_src C++
#include <unordered_map>
#include <vector>

using namespace std;

class Solution {
public: // Optimal O(n)
  vector<vector<int>> findMatrix(vector<int> &nums) {
    vector<vector<int>> matrix;
    unordered_map<int, int> mpp;
    for(auto n : nums) {
      if(mpp[n] >= matrix.size()) {
        matrix.push_back({});
      }
      matrix[mpp[n]].push_back(n);
      mpp[n]++;
    }
    return matrix;
  }
};
#+end_src

*** Complexity
- Time Complexity: =O(n)=
- Space Complexity: =O(m)=
