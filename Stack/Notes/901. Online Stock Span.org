#+title: 901 Online Stock Span
#+author: Bedaprakash Nayak
#+date: <2023-12-23 Sat>

Design an algorithm that collects daily price quotes for some stock and returns the span of that stock's price for the current day.

The *span* of the stock's price in one day is the maximum number of consecutive days (starting from that day and going backward) for which the stock price was less than or equal to the price of that day.

For example, if the prices of the stock in the last four days is ~[7,2,1,2]~ and the price of the stock today is ~2~, then the span of today is ~4~ because starting from today, the price of the stock was less than or equal ~2~ for ~4~ consecutive days.
Also, if the prices of the stock in the last four days is ~[7,34,1,2]~ and the price of the stock today is ~8~, then the span of today is ~3~ because starting from today, the price of the stock was less than or equal ~8~ for ~3~ consecutive days.

Implement the ~StockSpanner~ class:

- ~StockSpanner()~ Initializes the object of the class.
- ~int next(int price)~ Returns the span of the stock's price given that today's price is ~price~.

#+begin_src text

  Example 1:

    Input
    ["StockSpanner", "next", "next", "next", "next", "next", "next", "next"]
    [[], [100], [80], [60], [70], [60], [75], [85]]
    Output
    [null, 1, 1, 1, 2, 1, 4, 6]

    Explanation
    StockSpanner stockSpanner = new StockSpanner();
    stockSpanner.next(100); // return 1
    stockSpanner.next(80);  // return 1
    stockSpanner.next(60);  // return 1
    stockSpanner.next(70);  // return 2
    stockSpanner.next(60);  // return 1
    stockSpanner.next(75);  // return 4, because the last 4 prices (including today's price of 75) were less than or equal to today's price.
    stockSpanner.next(85);  // return 6

#+end_src

**Constraints:**

- ~1 <= price <= 105~
- At most ~10^4~ calls will be made to ~next~.

-----

** Intuition
Given ~[100, 80, 60, 70, 60, 75, 85]~ the question asks us to find the span of stock's price for the current day.
- On Day - 0, we have ~100~ as the day's price. So we need to find the previous highest price. As there is no previous prices then the span becomes ~null~.
- On Day - 1, we have ~80~ as the day's price. So we need to find the previous highest price i.e., ~100~ so the span becomes ~1~.
- On Day - 2, we have ~60~ as the day's price. So we need to find the previous highest price i.e., ~80~ so the span becomes ~1~.
- On Day - 3, we have ~70~ as the day's price. So we need to find the previous highest price i.e., ~80~ so the span becomes ~2~.
- On Day - 4, we have ~60~ as the day's price. So we need to find the previous highest price i.e., ~70~ so the span becomes ~1~.
- On Day - 5, we have ~75~ as the day's price. So we need to find the previous highest price i.e., ~80~ so the span becomes ~4~.
- On Day - 6, we have ~85~ as teh day's price. So we need to find teh previous highest price i.e., ~100~ so the span becomes ~6~.

** Approach
- The approach involves the usage of **Monotonic Stack**. We will maintain a monotonic stack in a increasing order and if the top element is less than the price then remove until the price is less than the top.
- Initially we define a stack of pairs of integers, where the first integer represents the stock price, and the second integer represents the span of that price.
- The constructor does not take any arguments.
- The ~next()~ method of the ~StockSpanner~ class takes an integer argument ~price~, which represents the price of the stock for the current day, and returns an integer representing the span of that price, where the initial value of the span is 1.
- If the stack is not empty and the top of the stack is less than or equal to the current price, then the span is increased by the span of the top of the stack, and the top of stack is popped.
- Pair of current price and span is pushed into the stack
- Lastly, return the span of current day's price.

** Solution

#+begin_src C

#include <stack>

using namespace std;

// Monotone Stack.
class StockSpanner {
private:
  stack<pair<int, int>> stack_;

public:
  StockSpanner() {}

  int next(int price) {
    int span = 1;
    while (!stack_.empty() && price >= stack_.top().first) {
      span += stack_.top().second;
      stack_.pop();
    }
    stack_.push({price, span});
    return span;
  }
};

#+end_src
