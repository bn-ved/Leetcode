#+title: 992. Subarrays With K Different Integers
#+author: Bedaprakash Nayak
#+date: <2023-12-24 Sun>
Given an integer array ~nums~ and an integer ~k~, return the number of good subarrays of ~nums~.
A good array is an array where the number of different integers in that array is exactly ~k~.
For example, ~[1,2,3,1,2]~ has 3 different integers: 1, 2, and 3.
A subarray is a contiguous part of an array.

#+begin_src text
Example 1:
Input: nums = [1,2,1,2,3], k = 2
Output: 7
Explanation: Subarrays formed with exactly 2 different integers: [1,2], [2,1], [1,2], [2,3], [1,2,1], [2,1,2], [1,2,1,2]

Example 2:
Input: nums = [1,2,1,3,4], k = 3
Output: 3
Explanation: Subarrays formed with exactly 3 different integers: [1,2,1,3], [2,1,3], [1,3,4].
#+end_src

*Constraints:*

- ~1 <= nums.length <= 2 * 104~
- ~1 <= nums[i], k <= nums.length~

-----

** Intuition
Given that we need to find the number of good subarrays where the number fo different integers in that subarray is exactly ~k~. To find this we can use Sliding window technique where we can define two pointers left and right maintaining a window and a unordered map storing the frequency of each number. If the number of distinct element size grows more than ~k~ then we start sliding the window from left side and decrease ~mpp[nums[left]]~. We find the number of subarrays with exactly ~k~ distinct elements by substracting number of subarrays with ~k - 1~ distinct element.

** Approach
- We can start initializing left and right pointers to maintain the window to observe.
- Define a unordered map to keep track of ~k~ distinct element.
- If there are more than ~k~ distict element then we shrink the window size from the left and decrease the mapping as well. If the count is 0 then we erase the element.
- Store the subarrays to answer ~right - left + 1~.
- Return answer value.
- Do the same thing for the ~k - 1~ and subtract it to find the subarrays with exactly ~k~ distinct numbers.

** Solution
#+begin_src C
#include <iostream>
#include <unordered_map>
#include <vector>

using namespace std;

class Solution {
public:
  int subarrays(vector<int> &nums, int k) {
    int n = nums.size();
    int left = 0;
    int ans = 0;
    unordered_map<int, int> mpp;
    for (int right = 0; right < n; right++) {
      mpp[nums[right]]++;
      while (mpp.size() > k) {
        mpp[nums[left]]--;
        if (mpp[nums[left]] == 0) {
          mpp.erase(nums[left]);
        }
        left++;
      }
      ans += right - left + 1;
    }
    return ans;
  }

public:
  int subarraysWithKDistinct(vector<int> &nums, int k) {
    return subarrays(nums, k) - subarrays(nums, k - 1);
  }
};
#+end_src

*** Complexity
- Time Complexity: ~O(N)~
- Space Complexity: ~O(k)~
