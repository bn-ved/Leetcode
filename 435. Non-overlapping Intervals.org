#+title: 435. Non Overlapping Intervals
#+author: Bedaprakash Nayak
#+date: <2024-01-02 Tue>
Given an array of intervals =intervals= where =intervals[i] = [starti, endi]=, return the minimum number of intervals you need to remove to make the rest of the intervals non-overlapping.

#+begin_src
Example 1:
Input: intervals = [[1,2],[2,3],[3,4],[1,3]]
Output: 1
Explanation: [1,3] can be removed and the rest of the intervals are non-overlapping.

Example 2:
Input: intervals = [[1,2],[1,2],[1,2]]
Output: 2
Explanation: You need to remove two [1,2] to make the rest of the intervals non-overlapping.

Example 3:
Input: intervals = [[1,2],[2,3]]
Output: 0
Explanation: You don't need to remove any of the intervals since they're already non-overlapping.
#+end_src

*Constraints:*

- ~1 <= intervals.length <= 105~
- ~intervals[i].length == 2~
- ~-5 * 104 <= starti < endi <= 5 * 104~

-----

** Intuition
Sort the array based on the end time. Then keep Track of the maximum =range= and check the intervals which can be part of that range.

** Approach
- Sort the array based on end time
- Keep prev pointer on prev interval and evaluate whether curr interval can be part of resultant non overlapping array.
- If prev intervals end time <= curr start time , the store curr as prev and increment the size/count of resultant array.
- Finally return n - count; // total intrevals - kept intervals

** Solution

#+begin_src C++
#include <vector>

using namespace std;

class Solution {
public:
  int eraseOverlapIntervals(vector<vector<int>> &intervals) {
    int n = intervals.size();
    int count = 0;
    sort(intervals.begin(), intervals.end(),
         [](vector<int> &a, vector<int> &b) { return a[1] < b[1]; });
    int range = intervals[0][1];
    for (int i = 1; i < n; i++) {
      if (range > intervals[i][0]) {
        count++;
      } else {
        range = intervals[i][1];
      }
    }
    return count;
  }
};
#+end_src

*** Complexity
- Time Complexity: =O(nlogn)=
- Space Complexity: =O(1)=
