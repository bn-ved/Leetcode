#+title: 55. Jump Game
#+author: Bedaprakash Nayak
#+date: <2024-01-01 Mon>
You are given an integer array =nums=. You are initially positioned at the array's first index, and each element in the array represents your maximum jump length at that position.

Return =true= if you can reach the last index, or =false= otherwise.

#+begin_src text
Example 1:
Input: nums = [2,3,1,1,4]
Output: true
Explanation: Jump 1 step from index 0 to 1, then 3 steps to the last index.

Example 2:
Input: nums = [3,2,1,0,4]
Output: false
Explanation: You will always arrive at index 3 no matter what. Its maximum jump length is 0, which makes it impossible to reach the last index.
#+end_src

*Constraints:*

- ~1 <= nums.length <= 104~
- ~0 <= nums[i] <= 105~

-----

** Intuition
The code aims to determine if it is possible to reach the last index in the given array of jump lengths. The idea is to use a greedy approach where you track of maximum reachable position as you traverse the array. If you can reach the last index or go beyond it, the answer is true; otherwise it's false.

** Approach
- Initialize maxReachable to 0. This variable represents the maximum index you can reach.
- Iterate through the nums array from left to right.
- For each index i, check if i is greater than maxReachable. If it is, return false because you cannot reach the current index.
- Update maxReachable to be the maximum of its current value and i + nums[i]. This accounts for the maximum reachable position.
- After the loop, if you have not reached the last index, return false.

** Solution
#+begin_src C
#include <vector>

using namespace std;

class Solution {
public:
  bool canJump(vector<int> &nums) {
    int canGo = 0;
    for (int i = 0; i < nums.size(); i++) {
      if (canGo < i) {
        return false;
      }
      canGo = max(canGo, i + nums[i]);
    }
    return true;
  }
};
#+end_src

*** Complexity
- Time Complexity: =O(n)=
- Space Complexity: =O(1)=
