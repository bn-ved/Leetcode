#+title: 45. Jump Game II
#+author: Bedaprakash Nayak
#+date: <2024-01-01 Mon>
You are given a 0-indexed array of integers =nums= of length =n=. You are initially positioned at =nums[0]=.

Each element =nums[i]= represents the maximum length of a forward jump from index =i=. In other words, if you are at =nums[i]=, you can jump to any =nums[i + j]= where:

- ~0 <= j <= nums[i]~
- ~i + j < n~
Return the minimum number of jumps to reach =nums[n - 1]=. The test cases are generated such that you can reach =nums[n - 1]=.

#+begin_src text
Example 1:
Input: nums = [2,3,1,1,4]
Output: 2
Explanation: The minimum number of jumps to reach the last index is 2. Jump 1 step from index 0 to 1, then 3 steps to the last index.

Example 2:
Input: nums = [2,3,0,1,4]
Output: 2
#+end_src

*Constraints:*

- 1 <= nums.length <= 104
- 0 <= nums[i] <= 1000
- It's guaranteed that you can reach =nums[n - 1]=.

-----

** Intuition
In this question we have to find the minimum number of jumps to reach the last index.
So, we calculate the maximum index we can reach from the current index.
If our pointer =i= reaches the last index that can be reached with current number of jumps then we have to make a jumps.
So, we increase the =count=.

** Approach

#+begin_src text
Example
nums = [2,3,1,1,4]
Here at index `0` reach become 2 and `i` == `last`.
So increase the `count`(1)
At index `1` `reach` becomes `4`.
So, when `i` becomes `2` it becomes equal to last.
We update last with current maximum jump(`reach`) last = 4.
And increase `count`.
So, answer  = 2.
#+end_src

** Solution

#+begin_src C
#include <vector>

using namespace std;

class Solution {
public:
  int jump(vector<int> &nums) {
    int canGo = 0;
    int count = 0;
    int last = 0;
    for (int i = 0; i < nums.size() - 1; i++) {
      canGo = max(canGo, i + nums[i]);
      if (i == last) {
        last = canGo;
        count++;
      }
    }
    return count;
  }
};
#+end_src

*** Complexity
- Time Complexity: =O(n)=
- Space Complexity: =O(1)=
