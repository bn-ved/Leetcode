#+title: 295. Find Median From Data Stream
#+author: Bedaprakash Nayak
#+date: <2023-12-30 Sat>
The median is the middle value in an ordered integer list. If the size of the list is even, there is no middle value, and the median is the mean of the two middle values.

- For example, for ~arr = [2,3,4]~, the median is =3=.
- For example, for ~arr = [2,3]~, the median is ~(2 + 3) / 2 = 2.5~.
Implement the MedianFinder class:

- ~MedianFinder()~ initializes the ~MedianFinder~ object.
- ~void addNum(int num)~ adds the integer ~num~ from the data stream to the data structure.
- ~double findMedian()~ returns the median of all elements so far. Answers within =10^-5= of the actual answer will be accepted.

#+begin_src
Example 1:

Input
["MedianFinder", "addNum", "addNum", "findMedian", "addNum", "findMedian"]
[[], [1], [2], [], [3], []]
Output
[null, null, null, 1.5, null, 2.0]

Explanation
MedianFinder medianFinder = new MedianFinder();
medianFinder.addNum(1);    // arr = [1]
medianFinder.addNum(2);    // arr = [1, 2]
medianFinder.findMedian(); // return 1.5 (i.e., (1 + 2) / 2)
medianFinder.addNum(3);    // arr[1, 2, 3]
medianFinder.findMedian(); // return 2.0
#+end_src

*Constraints:*

- ~-105 <= num <= 105~
- There will be at least one element in the data structure before calling =findMedian=.
- At most =5 * 104= calls will be made to =addNum= and =findMedian=.

-----

** Intuition
Let's group all the number into two groups =maxHeap= and =minHeap=, where all the numbers in =maxHeap= is greater than all the numbers that are in =minHeap=. The reason behind this is we only need the =smallest= and =largest= element to find the median.

** Approach
- Initialize two heaps one begin =minHeap= and other being a =maxHeap=.
- =void addNum(int num)= check if the =maxHeap= is empty() or ~maxHeap.top() >= num~ if this is the case then we need to add this =num= into the =maxHeap=. Else add =num= into the =minHeap=.
- We are maintaining the size of the =maxHeap= to be more than the =minHeap= which is =minHeap + 1=. So check if after adding =num= to the =maxHeap= if the size is greater than by 2. In that case remove the =top()= from the =maxHeap= and insert it to the =minHeap=. Similarly if the =maxHeap= is less than the =minHeap= then remove the =minHeap.top()= and add it to the =maxHeap=.
- =double findMedian()= if the size of two heap is same then add =minHeap.top() + maxHeap.top()= and divide it by =2.0= to find the median, else return the =maxHeap.top()= as the given elements are of odd size. and the median is the =maxHeap.top()=.

** Solution

#+begin_src C
#include <queue>

using namespace std;

class MedianFinder {
public:
  priority_queue<int> maxHeap;
  priority_queue<int, vector<int>, greater<>> minHeap;

  MedianFinder() {}

  void addNum(int num) {
    if (maxHeap.empty() || maxHeap.top() >= num) {
      maxHeap.push(num);
    } else {
      minHeap.push(num);
    }

    if (maxHeap.size() < minHeap.size()) {
      maxHeap.push(minHeap.top());
      minHeap.pop();
    } else if (maxHeap.size() - minHeap.size() > 1) {
      minHeap.push(maxHeap.top());
      maxHeap.pop();
    }
  }

  double findMedian() {
    if (maxHeap.size() == minHeap.size()) {
      return (maxHeap.top() + minHeap.top()) / 2.0;
    }
    return maxHeap.top();
  }
};
#+end_src

*** Complexity
- *Add Number*:
  - Time Complexity: =O(logn)=
  - Space Complexity: =O(1)=

- *Find Median*:
  - Time Complexity: =O(1)=
  - Space Complexity: =O(1)=
