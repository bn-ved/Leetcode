#+title: 1248. Count Number Of Nice Subarrays
#+author: Bedaprakash Nayak
#+date: <2023-12-23 Sat>
Given an array of integers ~nums~ and an integer ~k~. A continuous subarray is called nice if there are ~k~ odd numbers on it.
Return the number of nice sub-arrays.

#+begin_src
Example 1:

Input: nums = [1,1,2,1,1], k = 3
Output: 2
Explanation: The only sub-arrays with 3 odd numbers are [1,1,2,1] and [1,2,1,1].
Example 2:

Input: nums = [2,4,6], k = 1
Output: 0
Explanation: There is no odd numbers in the array.
Example 3:

Input: nums = [2,2,2,1,2,2,1,2,2,2], k = 2
Output: 16
#+end_src

*Constraints:*
- ~1 <= nums.length <= 50000~
- ~1 <= nums[i] <= 10^5~
- ~1 <= k <= nums.length~

-----

** Intuition
We need to find the number of subarrays having exactly ~k~ odd integers. We can solve this problem by using sliding window technique where we can maintain a window and slide it from left to right. While sliding the window, we keep track of the number of odd integers inside the window.We also keep the count of number of subarrays having exactly ~k~ odd intger.

** Approach
- We initialize two pointers ~left~ and ~right~ as ~0~.
- We will start increasing the size of the window by increasing ~right~.
- If we encounter any odd integer ~nums[right] % 2 == 1~ then we will increase the ~count~.
- If the ~count~ is greater than ~k~ then we will find slide the window until ~count < k~.
- Keep track of number of subarrays ~ans += right - left + 1~.
- To find the number of subarrays exactly containing ~k~ odd numbers we can do it by subtracting the number of subarrays exactly containing ~k - 1~ odd numbers.

** Solution
#+begin_src C
#include <iostream>

using namespace std;

class Solution {
public:
  int subarrays(vector<int> &nums, int k) {
    int n = nums.size();
    int left = 0;
    int ans = 0;
    int count = 0;
    for (int right = 0; right < n; right++) {
      if (nums[right] % 2 == 1) {
        count++;
      }
      while (count > k) {
        if (nums[left] % 2 == 1) {
          count--;
        }
        left++;
      }
      ans += right - left + 1;
    }
    return ans;
  }

public:
  int numberOfSubarrays(vector<int> &nums, int k) {
    return subarrays(nums, k) - subarrays(nums, k - 1);
  }
};
#+end_src

*** Complexity
- Time Complexity: ~O(N)~
- Space Complexity: ~O(1)~
