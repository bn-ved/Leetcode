#+title: 678. Valid Parenthesis String
#+author: Bedaprakash Nayak
#+date: <2023-12-31 Sun>
Given a string =s= containing only three types of characters: ='('=, =')'= and ='*'=, return true if =s= is valid.

The following rules define a valid string:

- Any left parenthesis =(= must have a corresponding right parenthesis =)=.
- Any right parenthesis =)= must have a corresponding left parenthesis =(=.
- Left parenthesis =(= must go before the corresponding right parenthesis =)=.
- =*= could be treated as a single right parenthesis =)= or a single left parenthesis =(= or an empty string ~""~.

#+begin_src text
Example 1:
Input: s = "()"
Output: true

Example 2:
Input: s = "(*)"
Output: true

Example 3:
Input: s = "(*))"
Output: true
#+end_src

*Constraints:*

- ~1 <= s.length <= 100~
- =s[i]= is =(=, =)= or =*=.

-----

** Intuition
There will =*=, =(= and =)= so either-
- Number of =(= is equal to Number of =)=
- Number of =(= is greater than Number of =)=
- Number of =(= is less than Number of =)=

So for case 2 we need convert =*= to =)= and for case 3 we need to convert =*= to =(=.

** Approach
- Initialize two stacks =paren= and =star=.
- If =s[i]= is =(= push that into =paren= stack and if it is =*= then push that into =star= stack.
- If =s[i]= is =)= then if =!paren.empty()= then =paren.pop()= else =star.pop()=. Otherwise return =false= as there is no matching parenthesis or wild character.
- While there are still elements in both the stack then try creating matching pairs.
- Finally if there are still elements present inside =paren= stack then return =false= or =true=.

** Solution
#+begin_src C
class Solution {
public:
  bool checkValidString_stack(string s) {
    stack<int> paren;
    stack<int> star;
    for (int i = 0; i < s.length(); i++) {
      if (s[i] == '(') {
        paren.push(i);
      } else if (s[i] == '*') {
        star.push(i);
      } else {
        if (!paren.empty()) {
          paren.pop();
        } else if (!star.empty()) {
          star.pop();
        } else {
          return false;
        }
      }
    }
    while (!paren.empty() and !star.empty() and paren.top() < star.top()) {
      paren.pop();
      star.pop();
    }
    return paren.empty() ? true : false;
  }
};
#+end_src

*** Complexity
- Time Complexity: =O(n)=
- Space Complexity: =O(n)=
